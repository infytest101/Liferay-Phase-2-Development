/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ROOMSERVICES.model.impl;

import ROOMSERVICES.model.BookingDetails;
import ROOMSERVICES.model.BookingDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BookingDetails service. Represents a row in the &quot;Infy_BookingDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BookingDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookingDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BookingDetailsImpl
 * @generated
 */
public class BookingDetailsModelImpl
	extends BaseModelImpl<BookingDetails> implements BookingDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a booking details model instance should use the <code>BookingDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "Infy_BookingDetails";

	public static final Object[][] TABLE_COLUMNS = {
		{"bookingDetailsId", Types.BIGINT}, {"roomId", Types.INTEGER},
		{"customerId", Types.INTEGER}, {"createDate", Types.TIMESTAMP},
		{"createBy", Types.VARCHAR}, {"updateDate", Types.TIMESTAMP},
		{"updatedBy", Types.VARCHAR}, {"totalRoomsBooked", Types.INTEGER},
		{"bookingStartDate", Types.TIMESTAMP},
		{"bookingEndDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bookingDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roomId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("customerId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updatedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalRoomsBooked", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("bookingStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bookingEndDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Infy_BookingDetails (bookingDetailsId LONG not null primary key,roomId INTEGER,customerId INTEGER,createDate DATE null,createBy VARCHAR(75) null,updateDate DATE null,updatedBy VARCHAR(75) null,totalRoomsBooked INTEGER,bookingStartDate DATE null,bookingEndDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Infy_BookingDetails";

	public static final String ORDER_BY_JPQL =
		" ORDER BY bookingDetails.bookingDetailsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Infy_BookingDetails.bookingDetailsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BOOKINGDETAILSID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BookingDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bookingDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBookingDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookingDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BookingDetails.class;
	}

	@Override
	public String getModelClassName() {
		return BookingDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BookingDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BookingDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BookingDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BookingDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BookingDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BookingDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BookingDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BookingDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BookingDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, BookingDetails>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			BookingDetails.class.getClassLoader(), BookingDetails.class,
			ModelWrapper.class);

		try {
			Constructor<BookingDetails> constructor =
				(Constructor<BookingDetails>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<BookingDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BookingDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BookingDetails, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<BookingDetails, Object>>();
		Map<String, BiConsumer<BookingDetails, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<BookingDetails, ?>>();

		attributeGetterFunctions.put(
			"bookingDetailsId", BookingDetails::getBookingDetailsId);
		attributeSetterBiConsumers.put(
			"bookingDetailsId",
			(BiConsumer<BookingDetails, Long>)
				BookingDetails::setBookingDetailsId);
		attributeGetterFunctions.put("roomId", BookingDetails::getRoomId);
		attributeSetterBiConsumers.put(
			"roomId",
			(BiConsumer<BookingDetails, Integer>)BookingDetails::setRoomId);
		attributeGetterFunctions.put(
			"customerId", BookingDetails::getCustomerId);
		attributeSetterBiConsumers.put(
			"customerId",
			(BiConsumer<BookingDetails, Integer>)BookingDetails::setCustomerId);
		attributeGetterFunctions.put(
			"createDate", BookingDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<BookingDetails, Date>)BookingDetails::setCreateDate);
		attributeGetterFunctions.put("createBy", BookingDetails::getCreateBy);
		attributeSetterBiConsumers.put(
			"createBy",
			(BiConsumer<BookingDetails, String>)BookingDetails::setCreateBy);
		attributeGetterFunctions.put(
			"updateDate", BookingDetails::getUpdateDate);
		attributeSetterBiConsumers.put(
			"updateDate",
			(BiConsumer<BookingDetails, Date>)BookingDetails::setUpdateDate);
		attributeGetterFunctions.put("updatedBy", BookingDetails::getUpdatedBy);
		attributeSetterBiConsumers.put(
			"updatedBy",
			(BiConsumer<BookingDetails, String>)BookingDetails::setUpdatedBy);
		attributeGetterFunctions.put(
			"totalRoomsBooked", BookingDetails::getTotalRoomsBooked);
		attributeSetterBiConsumers.put(
			"totalRoomsBooked",
			(BiConsumer<BookingDetails, Integer>)
				BookingDetails::setTotalRoomsBooked);
		attributeGetterFunctions.put(
			"bookingStartDate", BookingDetails::getBookingStartDate);
		attributeSetterBiConsumers.put(
			"bookingStartDate",
			(BiConsumer<BookingDetails, Date>)
				BookingDetails::setBookingStartDate);
		attributeGetterFunctions.put(
			"bookingEndDate", BookingDetails::getBookingEndDate);
		attributeSetterBiConsumers.put(
			"bookingEndDate",
			(BiConsumer<BookingDetails, Date>)
				BookingDetails::setBookingEndDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getBookingDetailsId() {
		return _bookingDetailsId;
	}

	@Override
	public void setBookingDetailsId(long bookingDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookingDetailsId = bookingDetailsId;
	}

	@Override
	public int getRoomId() {
		return _roomId;
	}

	@Override
	public void setRoomId(int roomId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_roomId = roomId;
	}

	@Override
	public int getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(int customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public String getCreateBy() {
		if (_createBy == null) {
			return "";
		}
		else {
			return _createBy;
		}
	}

	@Override
	public void setCreateBy(String createBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createBy = createBy;
	}

	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updateDate = updateDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return "";
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedBy = updatedBy;
	}

	@Override
	public int getTotalRoomsBooked() {
		return _totalRoomsBooked;
	}

	@Override
	public void setTotalRoomsBooked(int totalRoomsBooked) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalRoomsBooked = totalRoomsBooked;
	}

	@Override
	public Date getBookingStartDate() {
		return _bookingStartDate;
	}

	@Override
	public void setBookingStartDate(Date bookingStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookingStartDate = bookingStartDate;
	}

	@Override
	public Date getBookingEndDate() {
		return _bookingEndDate;
	}

	@Override
	public void setBookingEndDate(Date bookingEndDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookingEndDate = bookingEndDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, BookingDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BookingDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BookingDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookingDetailsImpl bookingDetailsImpl = new BookingDetailsImpl();

		bookingDetailsImpl.setBookingDetailsId(getBookingDetailsId());
		bookingDetailsImpl.setRoomId(getRoomId());
		bookingDetailsImpl.setCustomerId(getCustomerId());
		bookingDetailsImpl.setCreateDate(getCreateDate());
		bookingDetailsImpl.setCreateBy(getCreateBy());
		bookingDetailsImpl.setUpdateDate(getUpdateDate());
		bookingDetailsImpl.setUpdatedBy(getUpdatedBy());
		bookingDetailsImpl.setTotalRoomsBooked(getTotalRoomsBooked());
		bookingDetailsImpl.setBookingStartDate(getBookingStartDate());
		bookingDetailsImpl.setBookingEndDate(getBookingEndDate());

		bookingDetailsImpl.resetOriginalValues();

		return bookingDetailsImpl;
	}

	@Override
	public int compareTo(BookingDetails bookingDetails) {
		long primaryKey = bookingDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BookingDetails)) {
			return false;
		}

		BookingDetails bookingDetails = (BookingDetails)object;

		long primaryKey = bookingDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BookingDetails> toCacheModel() {
		BookingDetailsCacheModel bookingDetailsCacheModel =
			new BookingDetailsCacheModel();

		bookingDetailsCacheModel.bookingDetailsId = getBookingDetailsId();

		bookingDetailsCacheModel.roomId = getRoomId();

		bookingDetailsCacheModel.customerId = getCustomerId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			bookingDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			bookingDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		bookingDetailsCacheModel.createBy = getCreateBy();

		String createBy = bookingDetailsCacheModel.createBy;

		if ((createBy != null) && (createBy.length() == 0)) {
			bookingDetailsCacheModel.createBy = null;
		}

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			bookingDetailsCacheModel.updateDate = updateDate.getTime();
		}
		else {
			bookingDetailsCacheModel.updateDate = Long.MIN_VALUE;
		}

		bookingDetailsCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = bookingDetailsCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			bookingDetailsCacheModel.updatedBy = null;
		}

		bookingDetailsCacheModel.totalRoomsBooked = getTotalRoomsBooked();

		Date bookingStartDate = getBookingStartDate();

		if (bookingStartDate != null) {
			bookingDetailsCacheModel.bookingStartDate =
				bookingStartDate.getTime();
		}
		else {
			bookingDetailsCacheModel.bookingStartDate = Long.MIN_VALUE;
		}

		Date bookingEndDate = getBookingEndDate();

		if (bookingEndDate != null) {
			bookingDetailsCacheModel.bookingEndDate = bookingEndDate.getTime();
		}
		else {
			bookingDetailsCacheModel.bookingEndDate = Long.MIN_VALUE;
		}

		return bookingDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BookingDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BookingDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BookingDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((BookingDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BookingDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BookingDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BookingDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BookingDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BookingDetails>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _bookingDetailsId;
	private int _roomId;
	private int _customerId;
	private Date _createDate;
	private String _createBy;
	private Date _updateDate;
	private String _updatedBy;
	private int _totalRoomsBooked;
	private Date _bookingStartDate;
	private Date _bookingEndDate;

	public <T> T getColumnValue(String columnName) {
		Function<BookingDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BookingDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("bookingDetailsId", _bookingDetailsId);
		_columnOriginalValues.put("roomId", _roomId);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("createBy", _createBy);
		_columnOriginalValues.put("updateDate", _updateDate);
		_columnOriginalValues.put("updatedBy", _updatedBy);
		_columnOriginalValues.put("totalRoomsBooked", _totalRoomsBooked);
		_columnOriginalValues.put("bookingStartDate", _bookingStartDate);
		_columnOriginalValues.put("bookingEndDate", _bookingEndDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("bookingDetailsId", 1L);

		columnBitmasks.put("roomId", 2L);

		columnBitmasks.put("customerId", 4L);

		columnBitmasks.put("createDate", 8L);

		columnBitmasks.put("createBy", 16L);

		columnBitmasks.put("updateDate", 32L);

		columnBitmasks.put("updatedBy", 64L);

		columnBitmasks.put("totalRoomsBooked", 128L);

		columnBitmasks.put("bookingStartDate", 256L);

		columnBitmasks.put("bookingEndDate", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BookingDetails _escapedModel;

}